operation longSelectItem(name: String, val: Integer) : SQL!SelectItem {
  return selectItem(name, longValue(val));
}

operation longValue(val: Integer): SQL!LongValue {
  var v = new SQL!LongValue;
  v.value = val;
  return v;
}

operation stringSelectItem(name: String, val: String) : SQL!SelectItem {
  return selectItem(name, stringValue(val));
}

operation stringValue(val: String): SQL!StringValue {
  var v = new SQL!StringValue;
  v.value = val;
  return v;  
} 

operation booleanSelectItem(name: String, val: Boolean) : SQL!SelectItem {
  return selectItem(name, booleanValue(val));
}

operation booleanValue(val: Boolean): SQL!LongValue {
  var v = new SQL!LongValue;
  v.value = val ? 1l : 0l;
  return v;  
}

operation selectItem(name: String, exp: SQL!Expression): SQL!SelectItem {
   var item = new SQL!SelectItem;
   item.`alias` = sqlAlias(name);
   item.exp = exp;
   return item;
}

operation andExpression(left: SQL!Expression, right: SQL!Expression): SQL!AndExpression {
   var e = new SQL!AndExpression;
   e.leftExp = left;
   e.rightExp = right;
   return e; 
}

operation equalsExpression(left: SQL!Expression, right: SQL!Expression): SQL!EqualsToExpression {
   var e = new SQL!EqualsToExpression;
   e.leftExp = left;
   e.rightExp = right;
   return e; 
}

operation sqlAlias(name: String) {
  var al = new SQL!Alias;
  al.name = name;
  return al;
}

operation column(tableName: String, columnName: String) : SQL!Column {
  var col = new SQL!Column;
  col.name = columnName;
  col.table = table(tableName);
  return col;
}

operation subselect(aliasName: String, sel: SQL!PlainSelect) : SQL!SubSelect {
  var sub = new SQL!SubSelect;
  sub.`alias` = sqlAlias(aliasName);
  sub.selectBody = sel;
  return sub;
}

operation table(name: String): SQL!Table {
  var t = new SQL!Table;
  t.name = name;
  return t;
}

operation join(rightItem: SQL!FromItem): SQL!Join {
  var j = new SQL!Join;
  j.rightItem = rightItem;
  return j;
}

operation leftJoinOn(rightItem: SQL!FromItem, onExp: SQL!Expression): SQL!Join {
  var j = join(rightItem);
  j.left = true;
  j.onExp = onExp;
  return j;
}

@cached
operation OCL!VariableExp source() {
  return self.referredVariable.loopExp.source;
}

@cached
operation OCL!OclExpression freeVars(): Set {
  var allBoundVars =
    self.eAllContents().select(v:OCL!Variable | true).asSet();
  var allVarExps =
    self.eAllContents().select(ve|ve.isKindOf(OCL!VariableExp));

  return allVarExps
    .select(ve | not allBoundVars.contains(ve.referredVariable))
    .collect(ve | ve.referredVariable)
    .asSet();
}

operation OCL!VariableExp freeVars() : Set {
  return Set { self.referredVariable };
}

@cached
operation OCL!OclExpression sourceVars(): Set {
  var res : Set;

  for (v in self.freeVars()) {
    res.add(v);
    res.addAll(v.loopExp.source.sourceVars());
  }

  return res;
}

@cached
operation OCL!PropertyCallExp attributeName() : String {
  return self.referredProperty.name;
}

@cached
operation OCL!PropertyCallExp entityName() : String {
  return self.referredProperty.eContainer.name;
}

@cached
operation OCL!PropertyCallExp variableName(): String {
  return self.source.referredVariable.name;
}

operation Any eAllContents(): Sequence {
  // https://www.eclipse.org/forums/index.php/t/501975/
  return self.closure(e | e.eContents());
}
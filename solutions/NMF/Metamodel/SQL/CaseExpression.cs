//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.OclToSql.Sql
{
    
    
    /// <summary>
    /// The default implementation of the CaseExpression class
    /// </summary>
    [XmlNamespaceAttribute("http://www.example.org/sql")]
    [XmlNamespacePrefixAttribute("sql")]
    [ModelRepresentationClassAttribute("http://www.example.org/sql#//CaseExpression")]
    public partial class CaseExpression : Expression, ICaseExpression, IModelElement
    {
        
        private static Lazy<ITypedElement> _caseExpReference = new Lazy<ITypedElement>(RetrieveCaseExpReference);
        
        /// <summary>
        /// The backing field for the CaseExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _caseExp;
        
        private static Lazy<ITypedElement> _elseExpReference = new Lazy<ITypedElement>(RetrieveElseExpReference);
        
        /// <summary>
        /// The backing field for the ElseExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _elseExp;
        
        private static Lazy<ITypedElement> _whenClausesReference = new Lazy<ITypedElement>(RetrieveWhenClausesReference);
        
        /// <summary>
        /// The backing field for the WhenClauses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IWhenClause> _whenClauses;
        
        private static IClass _classInstance;
        
        public CaseExpression()
        {
            this._whenClauses = new ObservableCompositionOrderedSet<IWhenClause>(this);
            this._whenClauses.CollectionChanging += this.WhenClausesCollectionChanging;
            this._whenClauses.CollectionChanged += this.WhenClausesCollectionChanged;
        }
        
        /// <summary>
        /// The caseExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("caseExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression CaseExp
        {
            get
            {
                return this._caseExp;
            }
            set
            {
                if ((this._caseExp != value))
                {
                    IExpression old = this._caseExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCaseExpChanging(e);
                    this.OnPropertyChanging("CaseExp", e, _caseExpReference);
                    this._caseExp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetCaseExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetCaseExp;
                    }
                    this.OnCaseExpChanged(e);
                    this.OnPropertyChanged("CaseExp", e, _caseExpReference);
                }
            }
        }
        
        /// <summary>
        /// The elseExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("elseExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression ElseExp
        {
            get
            {
                return this._elseExp;
            }
            set
            {
                if ((this._elseExp != value))
                {
                    IExpression old = this._elseExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElseExpChanging(e);
                    this.OnPropertyChanging("ElseExp", e, _elseExpReference);
                    this._elseExp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetElseExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetElseExp;
                    }
                    this.OnElseExpChanged(e);
                    this.OnPropertyChanged("ElseExp", e, _elseExpReference);
                }
            }
        }
        
        /// <summary>
        /// The whenClauses property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("whenClauses")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IWhenClause> WhenClauses
        {
            get
            {
                return this._whenClauses;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new CaseExpressionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CaseExpressionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//CaseExpression")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CaseExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CaseExpChanging;
        
        /// <summary>
        /// Gets fired when the CaseExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CaseExpChanged;
        
        /// <summary>
        /// Gets fired before the ElseExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElseExpChanging;
        
        /// <summary>
        /// Gets fired when the ElseExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElseExpChanged;
        
        private static ITypedElement RetrieveCaseExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.CaseExpression.ClassInstance)).Resolve("caseExp")));
        }
        
        /// <summary>
        /// Raises the CaseExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCaseExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CaseExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CaseExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCaseExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CaseExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CaseExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCaseExp(object sender, System.EventArgs eventArgs)
        {
            this.CaseExp = null;
        }
        
        private static ITypedElement RetrieveElseExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.CaseExpression.ClassInstance)).Resolve("elseExp")));
        }
        
        /// <summary>
        /// Raises the ElseExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElseExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElseExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElseExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElseExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElseExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElseExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElseExp(object sender, System.EventArgs eventArgs)
        {
            this.ElseExp = null;
        }
        
        private static ITypedElement RetrieveWhenClausesReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.CaseExpression.ClassInstance)).Resolve("whenClauses")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WhenClauses property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WhenClausesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WhenClauses", e, _whenClausesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WhenClauses property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WhenClausesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WhenClauses", e, _whenClausesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.CaseExp))
            {
                return ModelHelper.CreatePath("CaseExp");
            }
            if ((element == this.ElseExp))
            {
                return ModelHelper.CreatePath("ElseExp");
            }
            int whenClausesIndex = ModelHelper.IndexOfReference(this.WhenClauses, element);
            if ((whenClausesIndex != -1))
            {
                return ModelHelper.CreatePath("whenClauses", whenClausesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CASEEXP"))
            {
                return this.CaseExp;
            }
            if ((reference == "ELSEEXP"))
            {
                return this.ElseExp;
            }
            if ((reference == "WHENCLAUSES"))
            {
                if ((index < this.WhenClauses.Count))
                {
                    return this.WhenClauses[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WHENCLAUSES"))
            {
                return this._whenClauses;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CASEEXP"))
            {
                this.CaseExp = ((IExpression)(value));
                return;
            }
            if ((feature == "ELSEEXP"))
            {
                this.ElseExp = ((IExpression)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CASEEXP"))
            {
                return new CaseExpProxy(this);
            }
            if ((reference == "ELSEEXP"))
            {
                return new ElseExpProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._whenClauses))
            {
                return "whenClauses";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//CaseExpression")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CaseExpression class
        /// </summary>
        public class CaseExpressionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CaseExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CaseExpressionChildrenCollection(CaseExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CaseExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElseExp != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.WhenClauses.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CaseExpChanged += this.PropagateValueChanges;
                this._parent.ElseExpChanged += this.PropagateValueChanges;
                this._parent.WhenClauses.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CaseExpChanged -= this.PropagateValueChanges;
                this._parent.ElseExpChanged -= this.PropagateValueChanges;
                this._parent.WhenClauses.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CaseExp == null))
                {
                    IExpression caseExpCasted = item.As<IExpression>();
                    if ((caseExpCasted != null))
                    {
                        this._parent.CaseExp = caseExpCasted;
                        return;
                    }
                }
                if ((this._parent.ElseExp == null))
                {
                    IExpression elseExpCasted = item.As<IExpression>();
                    if ((elseExpCasted != null))
                    {
                        this._parent.ElseExp = elseExpCasted;
                        return;
                    }
                }
                IWhenClause whenClausesCasted = item.As<IWhenClause>();
                if ((whenClausesCasted != null))
                {
                    this._parent.WhenClauses.Add(whenClausesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CaseExp = null;
                this._parent.ElseExp = null;
                this._parent.WhenClauses.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CaseExp))
                {
                    return true;
                }
                if ((item == this._parent.ElseExp))
                {
                    return true;
                }
                if (this._parent.WhenClauses.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CaseExp != null))
                {
                    array[arrayIndex] = this._parent.CaseExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElseExp != null))
                {
                    array[arrayIndex] = this._parent.ElseExp;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> whenClausesEnumerator = this._parent.WhenClauses.GetEnumerator();
                try
                {
                    for (
                    ; whenClausesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = whenClausesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    whenClausesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CaseExp == item))
                {
                    this._parent.CaseExp = null;
                    return true;
                }
                if ((this._parent.ElseExp == item))
                {
                    this._parent.ElseExp = null;
                    return true;
                }
                IWhenClause whenClauseItem = item.As<IWhenClause>();
                if (((whenClauseItem != null) 
                            && this._parent.WhenClauses.Remove(whenClauseItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CaseExp).Concat(this._parent.ElseExp).Concat(this._parent.WhenClauses).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CaseExpression class
        /// </summary>
        public class CaseExpressionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CaseExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CaseExpressionReferencedElementsCollection(CaseExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CaseExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElseExp != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.WhenClauses.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CaseExpChanged += this.PropagateValueChanges;
                this._parent.ElseExpChanged += this.PropagateValueChanges;
                this._parent.WhenClauses.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CaseExpChanged -= this.PropagateValueChanges;
                this._parent.ElseExpChanged -= this.PropagateValueChanges;
                this._parent.WhenClauses.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CaseExp == null))
                {
                    IExpression caseExpCasted = item.As<IExpression>();
                    if ((caseExpCasted != null))
                    {
                        this._parent.CaseExp = caseExpCasted;
                        return;
                    }
                }
                if ((this._parent.ElseExp == null))
                {
                    IExpression elseExpCasted = item.As<IExpression>();
                    if ((elseExpCasted != null))
                    {
                        this._parent.ElseExp = elseExpCasted;
                        return;
                    }
                }
                IWhenClause whenClausesCasted = item.As<IWhenClause>();
                if ((whenClausesCasted != null))
                {
                    this._parent.WhenClauses.Add(whenClausesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CaseExp = null;
                this._parent.ElseExp = null;
                this._parent.WhenClauses.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CaseExp))
                {
                    return true;
                }
                if ((item == this._parent.ElseExp))
                {
                    return true;
                }
                if (this._parent.WhenClauses.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CaseExp != null))
                {
                    array[arrayIndex] = this._parent.CaseExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElseExp != null))
                {
                    array[arrayIndex] = this._parent.ElseExp;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> whenClausesEnumerator = this._parent.WhenClauses.GetEnumerator();
                try
                {
                    for (
                    ; whenClausesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = whenClausesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    whenClausesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CaseExp == item))
                {
                    this._parent.CaseExp = null;
                    return true;
                }
                if ((this._parent.ElseExp == item))
                {
                    this._parent.ElseExp = null;
                    return true;
                }
                IWhenClause whenClauseItem = item.As<IWhenClause>();
                if (((whenClauseItem != null) 
                            && this._parent.WhenClauses.Remove(whenClauseItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CaseExp).Concat(this._parent.ElseExp).Concat(this._parent.WhenClauses).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the caseExp property
        /// </summary>
        private sealed class CaseExpProxy : ModelPropertyChange<ICaseExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CaseExpProxy(ICaseExpression modelElement) : 
                    base(modelElement, "caseExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.CaseExp;
                }
                set
                {
                    this.ModelElement.CaseExp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the elseExp property
        /// </summary>
        private sealed class ElseExpProxy : ModelPropertyChange<ICaseExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElseExpProxy(ICaseExpression modelElement) : 
                    base(modelElement, "elseExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.ElseExp;
                }
                set
                {
                    this.ModelElement.ElseExp = value;
                }
            }
        }
    }
}


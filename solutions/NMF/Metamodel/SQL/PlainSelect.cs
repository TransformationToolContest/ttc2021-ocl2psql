//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.OclToSql.Sql
{
    
    
    /// <summary>
    /// The default implementation of the PlainSelect class
    /// </summary>
    [XmlNamespaceAttribute("http://www.example.org/sql")]
    [XmlNamespacePrefixAttribute("sql")]
    [ModelRepresentationClassAttribute("http://www.example.org/sql#//PlainSelect")]
    public partial class PlainSelect : ModelElement, IPlainSelect, IModelElement
    {

        private static Lazy<ITypedElement> _selItemsReference = new Lazy<ITypedElement>(RetrieveSelItemsReference);
        
        /// <summary>
        /// The backing field for the SelItems property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ISelectItem> _selItems;
        
        private static Lazy<ITypedElement> _fromItemReference = new Lazy<ITypedElement>(RetrieveFromItemReference);
        
        /// <summary>
        /// The backing field for the FromItem property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFromItem _fromItem;
        
        private static Lazy<ITypedElement> _joinsReference = new Lazy<ITypedElement>(RetrieveJoinsReference);
        
        /// <summary>
        /// The backing field for the Joins property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<IJoin> _joins;
        
        private static Lazy<ITypedElement> _whereExpReference = new Lazy<ITypedElement>(RetrieveWhereExpReference);
        
        /// <summary>
        /// The backing field for the WhereExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _whereExp;
        
        private static Lazy<ITypedElement> _groupByReference = new Lazy<ITypedElement>(RetrieveGroupByReference);
        
        /// <summary>
        /// The backing field for the GroupBy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IGroupByElement _groupBy;
        
        private static IClass _classInstance;
        
        public PlainSelect()
        {
            this._selItems = new ObservableCompositionOrderedSet<ISelectItem>(this);
            this._selItems.CollectionChanging += this.SelItemsCollectionChanging;
            this._selItems.CollectionChanged += this.SelItemsCollectionChanged;
            this._joins = new ObservableCompositionOrderedSet<IJoin>(this);
            this._joins.CollectionChanging += this.JoinsCollectionChanging;
            this._joins.CollectionChanged += this.JoinsCollectionChanged;
        }
        
        /// <summary>
        /// The selItems property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("selItems")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISelectItem> SelItems
        {
            get
            {
                return this._selItems;
            }
        }
        
        /// <summary>
        /// The fromItem property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("fromItem")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IFromItem FromItem
        {
            get
            {
                return this._fromItem;
            }
            set
            {
                if ((this._fromItem != value))
                {
                    IFromItem old = this._fromItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromItemChanging(e);
                    this.OnPropertyChanging("FromItem", e, _fromItemReference);
                    this._fromItem = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFromItem;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFromItem;
                    }
                    this.OnFromItemChanged(e);
                    this.OnPropertyChanged("FromItem", e, _fromItemReference);
                }
            }
        }
        
        /// <summary>
        /// The joins property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("joins")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<IJoin> Joins
        {
            get
            {
                return this._joins;
            }
        }
        
        /// <summary>
        /// The whereExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("whereExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression WhereExp
        {
            get
            {
                return this._whereExp;
            }
            set
            {
                if ((this._whereExp != value))
                {
                    IExpression old = this._whereExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWhereExpChanging(e);
                    this.OnPropertyChanging("WhereExp", e, _whereExpReference);
                    this._whereExp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetWhereExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetWhereExp;
                    }
                    this.OnWhereExpChanged(e);
                    this.OnPropertyChanged("WhereExp", e, _whereExpReference);
                }
            }
        }
        
        /// <summary>
        /// The groupBy property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("groupBy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IGroupByElement GroupBy
        {
            get
            {
                return this._groupBy;
            }
            set
            {
                if ((this._groupBy != value))
                {
                    IGroupByElement old = this._groupBy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroupByChanging(e);
                    this.OnPropertyChanging("GroupBy", e, _groupByReference);
                    this._groupBy = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetGroupBy;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetGroupBy;
                    }
                    this.OnGroupByChanged(e);
                    this.OnPropertyChanged("GroupBy", e, _groupByReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PlainSelectChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PlainSelectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//PlainSelect")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FromItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromItemChanging;
        
        /// <summary>
        /// Gets fired when the FromItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromItemChanged;
        
        /// <summary>
        /// Gets fired before the WhereExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WhereExpChanging;
        
        /// <summary>
        /// Gets fired when the WhereExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WhereExpChanged;
        
        /// <summary>
        /// Gets fired before the GroupBy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroupByChanging;
        
        /// <summary>
        /// Gets fired when the GroupBy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroupByChanged;
        
        private static ITypedElement RetrieveSelItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.PlainSelect.ClassInstance)).Resolve("selItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SelItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SelItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SelItems", e, _selItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SelItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SelItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SelItems", e, _selItemsReference);
        }
        
        private static ITypedElement RetrieveFromItemReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.PlainSelect.ClassInstance)).Resolve("fromItem")));
        }
        
        /// <summary>
        /// Raises the FromItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FromItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFromItem(object sender, System.EventArgs eventArgs)
        {
            this.FromItem = null;
        }
        
        private static ITypedElement RetrieveJoinsReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.PlainSelect.ClassInstance)).Resolve("joins")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Joins property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void JoinsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Joins", e, _joinsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Joins property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void JoinsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Joins", e, _joinsReference);
        }
        
        private static ITypedElement RetrieveWhereExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.PlainSelect.ClassInstance)).Resolve("whereExp")));
        }
        
        /// <summary>
        /// Raises the WhereExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhereExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WhereExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WhereExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWhereExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WhereExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WhereExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWhereExp(object sender, System.EventArgs eventArgs)
        {
            this.WhereExp = null;
        }
        
        private static ITypedElement RetrieveGroupByReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.PlainSelect.ClassInstance)).Resolve("groupBy")));
        }
        
        /// <summary>
        /// Raises the GroupByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroupByChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroupByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroupByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroupByChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroupByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GroupBy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGroupBy(object sender, System.EventArgs eventArgs)
        {
            this.GroupBy = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int selItemsIndex = ModelHelper.IndexOfReference(this.SelItems, element);
            if ((selItemsIndex != -1))
            {
                return ModelHelper.CreatePath("selItems", selItemsIndex);
            }
            if ((element == this.FromItem))
            {
                return ModelHelper.CreatePath("FromItem");
            }
            int joinsIndex = ModelHelper.IndexOfReference(this.Joins, element);
            if ((joinsIndex != -1))
            {
                return ModelHelper.CreatePath("joins", joinsIndex);
            }
            if ((element == this.WhereExp))
            {
                return ModelHelper.CreatePath("WhereExp");
            }
            if ((element == this.GroupBy))
            {
                return ModelHelper.CreatePath("GroupBy");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SELITEMS"))
            {
                if ((index < this.SelItems.Count))
                {
                    return this.SelItems[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FROMITEM"))
            {
                return this.FromItem;
            }
            if ((reference == "JOINS"))
            {
                if ((index < this.Joins.Count))
                {
                    return this.Joins[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "WHEREEXP"))
            {
                return this.WhereExp;
            }
            if ((reference == "GROUPBY"))
            {
                return this.GroupBy;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SELITEMS"))
            {
                return this._selItems;
            }
            if ((feature == "JOINS"))
            {
                return this._joins;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FROMITEM"))
            {
                this.FromItem = ((IFromItem)(value));
                return;
            }
            if ((feature == "WHEREEXP"))
            {
                this.WhereExp = ((IExpression)(value));
                return;
            }
            if ((feature == "GROUPBY"))
            {
                this.GroupBy = ((IGroupByElement)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FROMITEM"))
            {
                return new FromItemProxy(this);
            }
            if ((reference == "WHEREEXP"))
            {
                return new WhereExpProxy(this);
            }
            if ((reference == "GROUPBY"))
            {
                return new GroupByProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._selItems))
            {
                return "selItems";
            }
            if ((container == this._joins))
            {
                return "joins";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//PlainSelect")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PlainSelect class
        /// </summary>
        public class PlainSelectChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PlainSelect _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PlainSelectChildrenCollection(PlainSelect parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SelItems.Count);
                    if ((this._parent.FromItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Joins.Count);
                    if ((this._parent.WhereExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GroupBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SelItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FromItemChanged += this.PropagateValueChanges;
                this._parent.Joins.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WhereExpChanged += this.PropagateValueChanges;
                this._parent.GroupByChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SelItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FromItemChanged -= this.PropagateValueChanges;
                this._parent.Joins.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WhereExpChanged -= this.PropagateValueChanges;
                this._parent.GroupByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISelectItem selItemsCasted = item.As<ISelectItem>();
                if ((selItemsCasted != null))
                {
                    this._parent.SelItems.Add(selItemsCasted);
                }
                if ((this._parent.FromItem == null))
                {
                    IFromItem fromItemCasted = item.As<IFromItem>();
                    if ((fromItemCasted != null))
                    {
                        this._parent.FromItem = fromItemCasted;
                        return;
                    }
                }
                IJoin joinsCasted = item.As<IJoin>();
                if ((joinsCasted != null))
                {
                    this._parent.Joins.Add(joinsCasted);
                }
                if ((this._parent.WhereExp == null))
                {
                    IExpression whereExpCasted = item.As<IExpression>();
                    if ((whereExpCasted != null))
                    {
                        this._parent.WhereExp = whereExpCasted;
                        return;
                    }
                }
                if ((this._parent.GroupBy == null))
                {
                    IGroupByElement groupByCasted = item.As<IGroupByElement>();
                    if ((groupByCasted != null))
                    {
                        this._parent.GroupBy = groupByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SelItems.Clear();
                this._parent.FromItem = null;
                this._parent.Joins.Clear();
                this._parent.WhereExp = null;
                this._parent.GroupBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SelItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.FromItem))
                {
                    return true;
                }
                if (this._parent.Joins.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WhereExp))
                {
                    return true;
                }
                if ((item == this._parent.GroupBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> selItemsEnumerator = this._parent.SelItems.GetEnumerator();
                try
                {
                    for (
                    ; selItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = selItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    selItemsEnumerator.Dispose();
                }
                if ((this._parent.FromItem != null))
                {
                    array[arrayIndex] = this._parent.FromItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> joinsEnumerator = this._parent.Joins.GetEnumerator();
                try
                {
                    for (
                    ; joinsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = joinsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    joinsEnumerator.Dispose();
                }
                if ((this._parent.WhereExp != null))
                {
                    array[arrayIndex] = this._parent.WhereExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GroupBy != null))
                {
                    array[arrayIndex] = this._parent.GroupBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISelectItem selectItemItem = item.As<ISelectItem>();
                if (((selectItemItem != null) 
                            && this._parent.SelItems.Remove(selectItemItem)))
                {
                    return true;
                }
                if ((this._parent.FromItem == item))
                {
                    this._parent.FromItem = null;
                    return true;
                }
                IJoin joinItem = item.As<IJoin>();
                if (((joinItem != null) 
                            && this._parent.Joins.Remove(joinItem)))
                {
                    return true;
                }
                if ((this._parent.WhereExp == item))
                {
                    this._parent.WhereExp = null;
                    return true;
                }
                if ((this._parent.GroupBy == item))
                {
                    this._parent.GroupBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SelItems).Concat(this._parent.FromItem).Concat(this._parent.Joins).Concat(this._parent.WhereExp).Concat(this._parent.GroupBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PlainSelect class
        /// </summary>
        public class PlainSelectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PlainSelect _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PlainSelectReferencedElementsCollection(PlainSelect parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SelItems.Count);
                    if ((this._parent.FromItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Joins.Count);
                    if ((this._parent.WhereExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GroupBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SelItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FromItemChanged += this.PropagateValueChanges;
                this._parent.Joins.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WhereExpChanged += this.PropagateValueChanges;
                this._parent.GroupByChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SelItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FromItemChanged -= this.PropagateValueChanges;
                this._parent.Joins.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WhereExpChanged -= this.PropagateValueChanges;
                this._parent.GroupByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISelectItem selItemsCasted = item.As<ISelectItem>();
                if ((selItemsCasted != null))
                {
                    this._parent.SelItems.Add(selItemsCasted);
                }
                if ((this._parent.FromItem == null))
                {
                    IFromItem fromItemCasted = item.As<IFromItem>();
                    if ((fromItemCasted != null))
                    {
                        this._parent.FromItem = fromItemCasted;
                        return;
                    }
                }
                IJoin joinsCasted = item.As<IJoin>();
                if ((joinsCasted != null))
                {
                    this._parent.Joins.Add(joinsCasted);
                }
                if ((this._parent.WhereExp == null))
                {
                    IExpression whereExpCasted = item.As<IExpression>();
                    if ((whereExpCasted != null))
                    {
                        this._parent.WhereExp = whereExpCasted;
                        return;
                    }
                }
                if ((this._parent.GroupBy == null))
                {
                    IGroupByElement groupByCasted = item.As<IGroupByElement>();
                    if ((groupByCasted != null))
                    {
                        this._parent.GroupBy = groupByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SelItems.Clear();
                this._parent.FromItem = null;
                this._parent.Joins.Clear();
                this._parent.WhereExp = null;
                this._parent.GroupBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SelItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.FromItem))
                {
                    return true;
                }
                if (this._parent.Joins.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WhereExp))
                {
                    return true;
                }
                if ((item == this._parent.GroupBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> selItemsEnumerator = this._parent.SelItems.GetEnumerator();
                try
                {
                    for (
                    ; selItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = selItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    selItemsEnumerator.Dispose();
                }
                if ((this._parent.FromItem != null))
                {
                    array[arrayIndex] = this._parent.FromItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> joinsEnumerator = this._parent.Joins.GetEnumerator();
                try
                {
                    for (
                    ; joinsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = joinsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    joinsEnumerator.Dispose();
                }
                if ((this._parent.WhereExp != null))
                {
                    array[arrayIndex] = this._parent.WhereExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GroupBy != null))
                {
                    array[arrayIndex] = this._parent.GroupBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISelectItem selectItemItem = item.As<ISelectItem>();
                if (((selectItemItem != null) 
                            && this._parent.SelItems.Remove(selectItemItem)))
                {
                    return true;
                }
                if ((this._parent.FromItem == item))
                {
                    this._parent.FromItem = null;
                    return true;
                }
                IJoin joinItem = item.As<IJoin>();
                if (((joinItem != null) 
                            && this._parent.Joins.Remove(joinItem)))
                {
                    return true;
                }
                if ((this._parent.WhereExp == item))
                {
                    this._parent.WhereExp = null;
                    return true;
                }
                if ((this._parent.GroupBy == item))
                {
                    this._parent.GroupBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SelItems).Concat(this._parent.FromItem).Concat(this._parent.Joins).Concat(this._parent.WhereExp).Concat(this._parent.GroupBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fromItem property
        /// </summary>
        private sealed class FromItemProxy : ModelPropertyChange<IPlainSelect, IFromItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromItemProxy(IPlainSelect modelElement) : 
                    base(modelElement, "fromItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFromItem Value
            {
                get
                {
                    return this.ModelElement.FromItem;
                }
                set
                {
                    this.ModelElement.FromItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the whereExp property
        /// </summary>
        private sealed class WhereExpProxy : ModelPropertyChange<IPlainSelect, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WhereExpProxy(IPlainSelect modelElement) : 
                    base(modelElement, "whereExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.WhereExp;
                }
                set
                {
                    this.ModelElement.WhereExp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the groupBy property
        /// </summary>
        private sealed class GroupByProxy : ModelPropertyChange<IPlainSelect, IGroupByElement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroupByProxy(IPlainSelect modelElement) : 
                    base(modelElement, "groupBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGroupByElement Value
            {
                get
                {
                    return this.ModelElement.GroupBy;
                }
                set
                {
                    this.ModelElement.GroupBy = value;
                }
            }
        }
    }
}


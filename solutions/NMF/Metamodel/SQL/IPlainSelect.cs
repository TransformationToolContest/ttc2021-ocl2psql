//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.OclToSql.Sql
{
    
    
    /// <summary>
    /// The public interface for PlainSelect
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PlainSelect))]
    [XmlDefaultImplementationTypeAttribute(typeof(PlainSelect))]
    [ModelRepresentationClassAttribute("http://www.example.org/sql#//PlainSelect")]
    public interface IPlainSelect : IModelElement
    {
        
        /// <summary>
        /// The selItems property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("selItems")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<ISelectItem> SelItems
        {
            get;
        }
        
        /// <summary>
        /// The fromItem property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("fromItem")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IFromItem FromItem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The joins property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("joins")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        IOrderedSetExpression<IJoin> Joins
        {
            get;
        }
        
        /// <summary>
        /// The whereExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("whereExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IExpression WhereExp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The groupBy property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("groupBy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IGroupByElement GroupBy
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the FromItem property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FromItemChanging;
        
        /// <summary>
        /// Gets fired when the FromItem property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FromItemChanged;
        
        /// <summary>
        /// Gets fired before the WhereExp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhereExpChanging;
        
        /// <summary>
        /// Gets fired when the WhereExp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WhereExpChanged;
        
        /// <summary>
        /// Gets fired before the GroupBy property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroupByChanging;
        
        /// <summary>
        /// Gets fired when the GroupBy property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroupByChanged;
    }
}


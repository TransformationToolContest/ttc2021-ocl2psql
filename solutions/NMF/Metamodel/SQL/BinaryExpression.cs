//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.OclToSql.Sql
{
    
    
    /// <summary>
    /// The default implementation of the BinaryExpression class
    /// </summary>
    [XmlNamespaceAttribute("http://www.example.org/sql")]
    [XmlNamespacePrefixAttribute("sql")]
    [ModelRepresentationClassAttribute("http://www.example.org/sql#//BinaryExpression")]
    public abstract partial class BinaryExpression : Expression, IBinaryExpression, IModelElement
    {
        
        private static Lazy<ITypedElement> _leftExpReference = new Lazy<ITypedElement>(RetrieveLeftExpReference);
        
        /// <summary>
        /// The backing field for the LeftExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _leftExp;
        
        private static Lazy<ITypedElement> _rightExpReference = new Lazy<ITypedElement>(RetrieveRightExpReference);
        
        /// <summary>
        /// The backing field for the RightExp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _rightExp;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The leftExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("leftExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression LeftExp
        {
            get
            {
                return this._leftExp;
            }
            set
            {
                if ((this._leftExp != value))
                {
                    IExpression old = this._leftExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLeftExpChanging(e);
                    this.OnPropertyChanging("LeftExp", e, _leftExpReference);
                    this._leftExp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetLeftExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetLeftExp;
                    }
                    this.OnLeftExpChanged(e);
                    this.OnPropertyChanged("LeftExp", e, _leftExpReference);
                }
            }
        }
        
        /// <summary>
        /// The rightExp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("rightExp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression RightExp
        {
            get
            {
                return this._rightExp;
            }
            set
            {
                if ((this._rightExp != value))
                {
                    IExpression old = this._rightExp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRightExpChanging(e);
                    this.OnPropertyChanging("RightExp", e, _rightExpReference);
                    this._rightExp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetRightExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRightExp;
                    }
                    this.OnRightExpChanged(e);
                    this.OnPropertyChanged("RightExp", e, _rightExpReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BinaryExpressionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BinaryExpressionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//BinaryExpression")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LeftExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeftExpChanging;
        
        /// <summary>
        /// Gets fired when the LeftExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeftExpChanged;
        
        /// <summary>
        /// Gets fired before the RightExp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RightExpChanging;
        
        /// <summary>
        /// Gets fired when the RightExp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RightExpChanged;
        
        private static ITypedElement RetrieveLeftExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.BinaryExpression.ClassInstance)).Resolve("leftExp")));
        }
        
        /// <summary>
        /// Raises the LeftExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeftExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeftExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LeftExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeftExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeftExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LeftExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLeftExp(object sender, System.EventArgs eventArgs)
        {
            this.LeftExp = null;
        }
        
        private static ITypedElement RetrieveRightExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.BinaryExpression.ClassInstance)).Resolve("rightExp")));
        }
        
        /// <summary>
        /// Raises the RightExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRightExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RightExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RightExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRightExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RightExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RightExp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRightExp(object sender, System.EventArgs eventArgs)
        {
            this.RightExp = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.LeftExp))
            {
                return ModelHelper.CreatePath("LeftExp");
            }
            if ((element == this.RightExp))
            {
                return ModelHelper.CreatePath("RightExp");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LEFTEXP"))
            {
                return this.LeftExp;
            }
            if ((reference == "RIGHTEXP"))
            {
                return this.RightExp;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LEFTEXP"))
            {
                this.LeftExp = ((IExpression)(value));
                return;
            }
            if ((feature == "RIGHTEXP"))
            {
                this.RightExp = ((IExpression)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LEFTEXP"))
            {
                return new LeftExpProxy(this);
            }
            if ((reference == "RIGHTEXP"))
            {
                return new RightExpProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//BinaryExpression")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BinaryExpression class
        /// </summary>
        public class BinaryExpressionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BinaryExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BinaryExpressionChildrenCollection(BinaryExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.LeftExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RightExp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LeftExpChanged += this.PropagateValueChanges;
                this._parent.RightExpChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LeftExpChanged -= this.PropagateValueChanges;
                this._parent.RightExpChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.LeftExp == null))
                {
                    IExpression leftExpCasted = item.As<IExpression>();
                    if ((leftExpCasted != null))
                    {
                        this._parent.LeftExp = leftExpCasted;
                        return;
                    }
                }
                if ((this._parent.RightExp == null))
                {
                    IExpression rightExpCasted = item.As<IExpression>();
                    if ((rightExpCasted != null))
                    {
                        this._parent.RightExp = rightExpCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LeftExp = null;
                this._parent.RightExp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.LeftExp))
                {
                    return true;
                }
                if ((item == this._parent.RightExp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.LeftExp != null))
                {
                    array[arrayIndex] = this._parent.LeftExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RightExp != null))
                {
                    array[arrayIndex] = this._parent.RightExp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.LeftExp == item))
                {
                    this._parent.LeftExp = null;
                    return true;
                }
                if ((this._parent.RightExp == item))
                {
                    this._parent.RightExp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LeftExp).Concat(this._parent.RightExp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BinaryExpression class
        /// </summary>
        public class BinaryExpressionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BinaryExpression _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BinaryExpressionReferencedElementsCollection(BinaryExpression parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.LeftExp != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RightExp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LeftExpChanged += this.PropagateValueChanges;
                this._parent.RightExpChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LeftExpChanged -= this.PropagateValueChanges;
                this._parent.RightExpChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.LeftExp == null))
                {
                    IExpression leftExpCasted = item.As<IExpression>();
                    if ((leftExpCasted != null))
                    {
                        this._parent.LeftExp = leftExpCasted;
                        return;
                    }
                }
                if ((this._parent.RightExp == null))
                {
                    IExpression rightExpCasted = item.As<IExpression>();
                    if ((rightExpCasted != null))
                    {
                        this._parent.RightExp = rightExpCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LeftExp = null;
                this._parent.RightExp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.LeftExp))
                {
                    return true;
                }
                if ((item == this._parent.RightExp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.LeftExp != null))
                {
                    array[arrayIndex] = this._parent.LeftExp;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RightExp != null))
                {
                    array[arrayIndex] = this._parent.RightExp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.LeftExp == item))
                {
                    this._parent.LeftExp = null;
                    return true;
                }
                if ((this._parent.RightExp == item))
                {
                    this._parent.RightExp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LeftExp).Concat(this._parent.RightExp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the leftExp property
        /// </summary>
        private sealed class LeftExpProxy : ModelPropertyChange<IBinaryExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeftExpProxy(IBinaryExpression modelElement) : 
                    base(modelElement, "leftExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.LeftExp;
                }
                set
                {
                    this.ModelElement.LeftExp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rightExp property
        /// </summary>
        private sealed class RightExpProxy : ModelPropertyChange<IBinaryExpression, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RightExpProxy(IBinaryExpression modelElement) : 
                    base(modelElement, "rightExp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.RightExp;
                }
                set
                {
                    this.ModelElement.RightExp = value;
                }
            }
        }
    }
}


//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.OclToSql.Sql
{
    
    
    /// <summary>
    /// The default implementation of the SelectItem class
    /// </summary>
    [XmlNamespaceAttribute("http://www.example.org/sql")]
    [XmlNamespacePrefixAttribute("sql")]
    [ModelRepresentationClassAttribute("http://www.example.org/sql#//SelectItem")]
    public partial class SelectItem : ModelElement, ISelectItem, IModelElement
    {
        
        private static Lazy<ITypedElement> _aliasReference = new Lazy<ITypedElement>(RetrieveAliasReference);
        
        /// <summary>
        /// The backing field for the Alias property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAlias _alias;
        
        private static Lazy<ITypedElement> _expReference = new Lazy<ITypedElement>(RetrieveExpReference);
        
        /// <summary>
        /// The backing field for the Exp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IExpression _exp;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The alias property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("alias")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IAlias Alias
        {
            get
            {
                return this._alias;
            }
            set
            {
                if ((this._alias != value))
                {
                    IAlias old = this._alias;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAliasChanging(e);
                    this.OnPropertyChanging("Alias", e, _aliasReference);
                    this._alias = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetAlias;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetAlias;
                    }
                    this.OnAliasChanged(e);
                    this.OnPropertyChanged("Alias", e, _aliasReference);
                }
            }
        }
        
        /// <summary>
        /// The exp property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("exp")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IExpression Exp
        {
            get
            {
                return this._exp;
            }
            set
            {
                if ((this._exp != value))
                {
                    IExpression old = this._exp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExpChanging(e);
                    this.OnPropertyChanging("Exp", e, _expReference);
                    this._exp = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetExp;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetExp;
                    }
                    this.OnExpChanged(e);
                    this.OnPropertyChanged("Exp", e, _expReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SelectItemChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SelectItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//SelectItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Alias property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AliasChanging;
        
        /// <summary>
        /// Gets fired when the Alias property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AliasChanged;
        
        /// <summary>
        /// Gets fired before the Exp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExpChanging;
        
        /// <summary>
        /// Gets fired when the Exp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExpChanged;
        
        private static ITypedElement RetrieveAliasReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.SelectItem.ClassInstance)).Resolve("alias")));
        }
        
        /// <summary>
        /// Raises the AliasChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAliasChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AliasChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AliasChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAliasChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AliasChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Alias property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAlias(object sender, System.EventArgs eventArgs)
        {
            this.Alias = null;
        }
        
        private static ITypedElement RetrieveExpReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Sql.SelectItem.ClassInstance)).Resolve("exp")));
        }
        
        /// <summary>
        /// Raises the ExpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Exp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExp(object sender, System.EventArgs eventArgs)
        {
            this.Exp = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Alias))
            {
                return ModelHelper.CreatePath("Alias");
            }
            if ((element == this.Exp))
            {
                return ModelHelper.CreatePath("Exp");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ALIAS"))
            {
                return this.Alias;
            }
            if ((reference == "EXP"))
            {
                return this.Exp;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ALIAS"))
            {
                this.Alias = ((IAlias)(value));
                return;
            }
            if ((feature == "EXP"))
            {
                this.Exp = ((IExpression)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ALIAS"))
            {
                return new AliasProxy(this);
            }
            if ((reference == "EXP"))
            {
                return new ExpProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/sql#//SelectItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SelectItem class
        /// </summary>
        public class SelectItemChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SelectItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SelectItemChildrenCollection(SelectItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Alias != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Exp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AliasChanged += this.PropagateValueChanges;
                this._parent.ExpChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AliasChanged -= this.PropagateValueChanges;
                this._parent.ExpChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Alias == null))
                {
                    IAlias aliasCasted = item.As<IAlias>();
                    if ((aliasCasted != null))
                    {
                        this._parent.Alias = aliasCasted;
                        return;
                    }
                }
                if ((this._parent.Exp == null))
                {
                    IExpression expCasted = item.As<IExpression>();
                    if ((expCasted != null))
                    {
                        this._parent.Exp = expCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Alias = null;
                this._parent.Exp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Alias))
                {
                    return true;
                }
                if ((item == this._parent.Exp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Alias != null))
                {
                    array[arrayIndex] = this._parent.Alias;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Exp != null))
                {
                    array[arrayIndex] = this._parent.Exp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Alias == item))
                {
                    this._parent.Alias = null;
                    return true;
                }
                if ((this._parent.Exp == item))
                {
                    this._parent.Exp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Alias).Concat(this._parent.Exp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SelectItem class
        /// </summary>
        public class SelectItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SelectItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SelectItemReferencedElementsCollection(SelectItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Alias != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Exp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AliasChanged += this.PropagateValueChanges;
                this._parent.ExpChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AliasChanged -= this.PropagateValueChanges;
                this._parent.ExpChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Alias == null))
                {
                    IAlias aliasCasted = item.As<IAlias>();
                    if ((aliasCasted != null))
                    {
                        this._parent.Alias = aliasCasted;
                        return;
                    }
                }
                if ((this._parent.Exp == null))
                {
                    IExpression expCasted = item.As<IExpression>();
                    if ((expCasted != null))
                    {
                        this._parent.Exp = expCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Alias = null;
                this._parent.Exp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Alias))
                {
                    return true;
                }
                if ((item == this._parent.Exp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Alias != null))
                {
                    array[arrayIndex] = this._parent.Alias;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Exp != null))
                {
                    array[arrayIndex] = this._parent.Exp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Alias == item))
                {
                    this._parent.Alias = null;
                    return true;
                }
                if ((this._parent.Exp == item))
                {
                    this._parent.Exp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Alias).Concat(this._parent.Exp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the alias property
        /// </summary>
        private sealed class AliasProxy : ModelPropertyChange<ISelectItem, IAlias>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AliasProxy(ISelectItem modelElement) : 
                    base(modelElement, "alias")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAlias Value
            {
                get
                {
                    return this.ModelElement.Alias;
                }
                set
                {
                    this.ModelElement.Alias = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the exp property
        /// </summary>
        private sealed class ExpProxy : ModelPropertyChange<ISelectItem, IExpression>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExpProxy(ISelectItem modelElement) : 
                    base(modelElement, "exp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExpression Value
            {
                get
                {
                    return this.ModelElement.Exp;
                }
                set
                {
                    this.ModelElement.Exp = value;
                }
            }
        }
    }
}


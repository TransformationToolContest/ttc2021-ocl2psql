//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using TTC2021.OclToSql.Ocl.Dm;

namespace TTC2021.OclToSql.Ocl.Exp
{
    
    
    public class OperatorConverter : TypeConverter
    {
        
        public override bool CanConvertFrom(ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(Operator);
            }
            string valueString = value.ToString();
            if ((valueString == "equal"))
            {
                return Operator.Equal;
            }
            if ((valueString == "AND"))
            {
                return Operator.AND;
            }
            if ((valueString == "allInstances"))
            {
                return Operator.AllInstances;
            }
            if ((valueString == "size"))
            {
                return Operator.Size;
            }
            return default(Operator);
        }
        
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            Operator valueCasted = ((Operator)(value));
            if ((valueCasted == Operator.Equal))
            {
                return "equal";
            }
            if ((valueCasted == Operator.AND))
            {
                return "AND";
            }
            if ((valueCasted == Operator.AllInstances))
            {
                return "allInstances";
            }
            if ((valueCasted == Operator.Size))
            {
                return "size";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}


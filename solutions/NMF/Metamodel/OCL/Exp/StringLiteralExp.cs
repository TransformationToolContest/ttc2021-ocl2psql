//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using TTC2021.OclToSql.Ocl.Dm;

namespace TTC2021.OclToSql.Ocl.Exp
{
    
    
    /// <summary>
    /// The default implementation of the StringLiteralExp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.example.org/ocl/exp")]
    [XmlNamespacePrefixAttribute("EXP")]
    [ModelRepresentationClassAttribute("http://www.example.org/ocl#//exp/StringLiteralExp")]
    public partial class StringLiteralExp : OclExpression, IStringLiteralExp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StringValue property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _stringValue;
        
        private static Lazy<ITypedElement> _stringValueAttribute = new Lazy<ITypedElement>(RetrieveStringValueAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The stringValue property
        /// </summary>
        [DisplayNameAttribute("stringValue")]
        [CategoryAttribute("StringLiteralExp")]
        [XmlElementNameAttribute("stringValue")]
        [XmlAttributeAttribute(true)]
        public string StringValue
        {
            get
            {
                return this._stringValue;
            }
            set
            {
                if ((this._stringValue != value))
                {
                    string old = this._stringValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStringValueChanging(e);
                    this.OnPropertyChanging("StringValue", e, _stringValueAttribute);
                    this._stringValue = value;
                    this.OnStringValueChanged(e);
                    this.OnPropertyChanged("StringValue", e, _stringValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/ocl#//exp/StringLiteralExp")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StringValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StringValueChanging;
        
        /// <summary>
        /// Gets fired when the StringValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StringValueChanged;
        
        private static ITypedElement RetrieveStringValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Exp.StringLiteralExp.ClassInstance)).Resolve("stringValue")));
        }
        
        /// <summary>
        /// Raises the StringValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStringValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StringValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StringValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStringValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StringValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STRINGVALUE"))
            {
                return this.StringValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STRINGVALUE"))
            {
                this.StringValue = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STRINGVALUE"))
            {
                return new StringValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/ocl#//exp/StringLiteralExp")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stringValue property
        /// </summary>
        private sealed class StringValueProxy : ModelPropertyChange<IStringLiteralExp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StringValueProxy(IStringLiteralExp modelElement) : 
                    base(modelElement, "stringValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.StringValue;
                }
                set
                {
                    this.ModelElement.StringValue = value;
                }
            }
        }
    }
}


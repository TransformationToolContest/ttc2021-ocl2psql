//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace TTC2021.OclToSql.Ocl.Dm
{
    
    
    /// <summary>
    /// The default implementation of the AssociationEnd class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.example.org/ocl/dm")]
    [XmlNamespacePrefixAttribute("DM")]
    [ModelRepresentationClassAttribute("http://www.example.org/ocl#//dm/AssociationEnd")]
    [DebuggerDisplayAttribute("AssociationEnd {Name}")]
    public partial class AssociationEnd : ModelElement, IAssociationEnd, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the Mult property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Multiplicity _mult;
        
        private static Lazy<ITypedElement> _multAttribute = new Lazy<ITypedElement>(RetrieveMultAttribute);
        
        /// <summary>
        /// The backing field for the Association property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _association;
        
        private static Lazy<ITypedElement> _associationAttribute = new Lazy<ITypedElement>(RetrieveAssociationAttribute);
        
        private static Lazy<ITypedElement> _targetReference = new Lazy<ITypedElement>(RetrieveTargetReference);
        
        /// <summary>
        /// The backing field for the Target property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IEntity _target;
        
        private static Lazy<ITypedElement> _oppReference = new Lazy<ITypedElement>(RetrieveOppReference);
        
        /// <summary>
        /// The backing field for the Opp property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAssociationEnd _opp;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("AssociationEnd")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The mult property
        /// </summary>
        [DisplayNameAttribute("mult")]
        [CategoryAttribute("AssociationEnd")]
        [XmlElementNameAttribute("mult")]
        [XmlAttributeAttribute(true)]
        public Multiplicity Mult
        {
            get
            {
                return this._mult;
            }
            set
            {
                if ((this._mult != value))
                {
                    object old = this._mult;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMultChanging(e);
                    this.OnPropertyChanging("Mult", e, _multAttribute);
                    this._mult = value;
                    this.OnMultChanged(e);
                    this.OnPropertyChanged("Mult", e, _multAttribute);
                }
            }
        }
        
        /// <summary>
        /// The association property
        /// </summary>
        [DisplayNameAttribute("association")]
        [CategoryAttribute("AssociationEnd")]
        [XmlElementNameAttribute("association")]
        [XmlAttributeAttribute(true)]
        public string Association
        {
            get
            {
                return this._association;
            }
            set
            {
                if ((this._association != value))
                {
                    string old = this._association;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssociationChanging(e);
                    this.OnPropertyChanging("Association", e, _associationAttribute);
                    this._association = value;
                    this.OnAssociationChanged(e);
                    this.OnPropertyChanged("Association", e, _associationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [DisplayNameAttribute("target")]
        [CategoryAttribute("AssociationEnd")]
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        public IEntity Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    IEntity old = this._target;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetChanging(e);
                    this.OnPropertyChanging("Target", e, _targetReference);
                    this._target = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTarget;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTarget;
                    }
                    this.OnTargetChanged(e);
                    this.OnPropertyChanged("Target", e, _targetReference);
                }
            }
        }
        
        /// <summary>
        /// The opp property
        /// </summary>
        [DisplayNameAttribute("opp")]
        [CategoryAttribute("AssociationEnd")]
        [XmlElementNameAttribute("opp")]
        [XmlAttributeAttribute(true)]
        public IAssociationEnd Opp
        {
            get
            {
                return this._opp;
            }
            set
            {
                if ((this._opp != value))
                {
                    IAssociationEnd old = this._opp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOppChanging(e);
                    this.OnPropertyChanging("Opp", e, _oppReference);
                    this._opp = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOpp;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOpp;
                    }
                    this.OnOppChanged(e);
                    this.OnPropertyChanged("Opp", e, _oppReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssociationEndReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/ocl#//dm/AssociationEnd")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Mult property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultChanging;
        
        /// <summary>
        /// Gets fired when the Mult property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MultChanged;
        
        /// <summary>
        /// Gets fired before the Association property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssociationChanging;
        
        /// <summary>
        /// Gets fired when the Association property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssociationChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanged;
        
        /// <summary>
        /// Gets fired before the Opp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppChanging;
        
        /// <summary>
        /// Gets fired when the Opp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Dm.AssociationEnd.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMultAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Dm.AssociationEnd.ClassInstance)).Resolve("mult")));
        }
        
        /// <summary>
        /// Raises the MultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAssociationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Dm.AssociationEnd.ClassInstance)).Resolve("association")));
        }
        
        /// <summary>
        /// Raises the AssociationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssociationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssociationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssociationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssociationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssociationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTargetReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Dm.AssociationEnd.ClassInstance)).Resolve("target")));
        }
        
        /// <summary>
        /// Raises the TargetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Target property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTarget(object sender, System.EventArgs eventArgs)
        {
            this.Target = null;
        }
        
        private static ITypedElement RetrieveOppReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.OclToSql.Ocl.Dm.AssociationEnd.ClassInstance)).Resolve("opp")));
        }
        
        /// <summary>
        /// Raises the OppChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OppChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opp property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpp(object sender, System.EventArgs eventArgs)
        {
            this.Opp = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "TARGET"))
            {
                return this.Target;
            }
            if ((reference == "OPP"))
            {
                return this.Opp;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "MULT"))
            {
                return this.Mult;
            }
            if ((attribute == "ASSOCIATION"))
            {
                return this.Association;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TARGET"))
            {
                this.Target = ((IEntity)(value));
                return;
            }
            if ((feature == "OPP"))
            {
                this.Opp = ((IAssociationEnd)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "MULT"))
            {
                this.Mult = ((Multiplicity)(value));
                return;
            }
            if ((feature == "ASSOCIATION"))
            {
                this.Association = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "MULT"))
            {
                return Observable.Box(new MultProxy(this));
            }
            if ((attribute == "ASSOCIATION"))
            {
                return new AssociationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TARGET"))
            {
                return new TargetProxy(this);
            }
            if ((reference == "OPP"))
            {
                return new OppProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.example.org/ocl#//dm/AssociationEnd")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssociationEnd class
        /// </summary>
        public class AssociationEndReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssociationEnd _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssociationEndReferencedElementsCollection(AssociationEnd parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Target != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opp != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetChanged += this.PropagateValueChanges;
                this._parent.OppChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetChanged -= this.PropagateValueChanges;
                this._parent.OppChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Target == null))
                {
                    IEntity targetCasted = item.As<IEntity>();
                    if ((targetCasted != null))
                    {
                        this._parent.Target = targetCasted;
                        return;
                    }
                }
                if ((this._parent.Opp == null))
                {
                    IAssociationEnd oppCasted = item.As<IAssociationEnd>();
                    if ((oppCasted != null))
                    {
                        this._parent.Opp = oppCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Target = null;
                this._parent.Opp = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Target))
                {
                    return true;
                }
                if ((item == this._parent.Opp))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Target != null))
                {
                    array[arrayIndex] = this._parent.Target;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opp != null))
                {
                    array[arrayIndex] = this._parent.Opp;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Target == item))
                {
                    this._parent.Target = null;
                    return true;
                }
                if ((this._parent.Opp == item))
                {
                    this._parent.Opp = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Target).Concat(this._parent.Opp).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IAssociationEnd, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IAssociationEnd modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mult property
        /// </summary>
        private sealed class MultProxy : ModelPropertyChange<IAssociationEnd, Multiplicity>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MultProxy(IAssociationEnd modelElement) : 
                    base(modelElement, "mult")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Multiplicity Value
            {
                get
                {
                    return this.ModelElement.Mult;
                }
                set
                {
                    this.ModelElement.Mult = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the association property
        /// </summary>
        private sealed class AssociationProxy : ModelPropertyChange<IAssociationEnd, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssociationProxy(IAssociationEnd modelElement) : 
                    base(modelElement, "association")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Association;
                }
                set
                {
                    this.ModelElement.Association = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the target property
        /// </summary>
        private sealed class TargetProxy : ModelPropertyChange<IAssociationEnd, IEntity>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetProxy(IAssociationEnd modelElement) : 
                    base(modelElement, "target")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEntity Value
            {
                get
                {
                    return this.ModelElement.Target;
                }
                set
                {
                    this.ModelElement.Target = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the opp property
        /// </summary>
        private sealed class OppProxy : ModelPropertyChange<IAssociationEnd, IAssociationEnd>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppProxy(IAssociationEnd modelElement) : 
                    base(modelElement, "opp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssociationEnd Value
            {
                get
                {
                    return this.ModelElement.Opp;
                }
                set
                {
                    this.ModelElement.Opp = value;
                }
            }
        }
    }
}

